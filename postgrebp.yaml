apiVersion: cr.kanister.io/v1alpha1
kind: Blueprint
metadata:
  name: postgres-bp
actions:
  backupPrehook:
    kind: Deployment
    deferPhase:
      func: KubeOps
      args:
        operation: delete
        objectReference:
          apiVersion: v1
          resource: "pods"
          name: "{{ .Phases.createBackupPod.Output.name }}"
          namespace: "{{ .Deployment.Namespace }}"

    phases:
    - name: createBackupPod
      func: KubeOps
      objects:
        pgSecret:
          kind: Secret
          name: postgres-secrets
          namespace: '{{ .Deployment.Namespace }}'
      
      args:
        operation: create
        namespace: '{{ .Deployment.Namespace }}'
        spec: |-
          apiVersion: v1
          kind: Pod
          metadata:
            generateName: postgres-backup-session
          spec:
            restartPolicy: Never
            containers:
              - name: container
                image: bitnami/postgresql:latest
                command:
                - bash
                - -o
                - errexit
                - -o
                - pipefail
                - -c
                - |
                  export PGPASSWORD='{{ index.Phases.createBackupPod.Secrets.postgres-secrets.Data "POSTGRES_PASSWORD" | toString }}'
                  export PGHOST='postgres-service.{{ .Deployment.Namespace }}.svc.cluster.local'
                  export PGUSER={{ index.Phases.createBackupPod.Secrets.postgres-secrets.Data "POSTGRES_USER" | toString }}'
                  ## Create file descriptor to send commands to psql
                  mkfifo /tmp/pg_in
                  ## Create "holder" process to keep pg_in open
                  while sleep 1; do :; done >/tmp/pg_in &
                  ## Save "holder" PID to a file to kill it later
                  echo $! > /tmp/holder_pid
                  ## Run psql session reading from pg_in and writing to pg_out
                  ## Using tee here to keep the pod logs (might need to replace with just `> /tmp/pg_out`)
                  ## TODO: should we track stderr here?
                  cat /tmp/pg_in | psql -U ${PGUSER} | tee /tmp/pg_out

    - func: WaitV2
      name: waitForPodReady
      args:
        timeout: 5m
        conditions:
          anyOf:
          - condition: '{{ $available := false }}{{ range $condition := $.status.conditions }}{{ if and (eq .type "ContainersReady") (eq .status "True") }}{{ $available = true }}{{ end }}{{ end }}{{ $available }}'
            objectReference:
              apiVersion: "v1"
              name: "{{ .Phases.createBackupPod.Output.name }}"
              namespace: '{{ .Deployment.Namespace }}'
              resource: "pods"

    - name: startBackup
      func: KubeExec
      args:
        namespace: '{{ .Deployment.Namespace }}'
        pod: "{{ .Phases.createBackupPod.Output.name }}"
        command:
        - bash
        - -o
        - errexit
        - -o
        - pipefail
        - -c
        - |
          ## Send pg_backup_start command to psql session
          echo "SELECT pg_backup_start(label => 'kasten_backup', fast => false);" > /tmp/pg_in
          ## Make sure operation completed
          ## TODO: maybe there's a better way to fail/log here?
          grep -q pg_backup_start <(tail -f /tmp/pg_out)


    - name: stopBackup
      func: KubeExec
      args:
        namespace: '{{ .Deployment.Namespace }}'
        pod: "{{ .Phases.createBackupPod.Output.name }}"
        command:
        - bash
        - -o
        - errexit
        - -o
        - pipefail
        - -c
        - |
          ## Send pg_backup_stop command to psql session
          echo "SELECT * FROM pg_backup_stop(wait_for_archive => true);" > /tmp/pg_in
          ## Make sure operation completed
          ## TODO: maybe there's a better way to fail/log here?
          grep -q "LABEL: kasten_backup" <(tail -f /tmp/pg_out)

